generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    @@map("Examples")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    @@unique([provider, providerAccountId])
    @@map("Accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime @db.Timestamptz()

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    @@map("Sessions")
}

model Role {
    id   String @id @default(cuid())
    name String @unique

    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    permissions RolePermission[] @relation("rolePermissions")
    users       User[]           @relation("userRole")

    @@map("Roles")
}

enum Permissions {
    UserView
    UserCreate
    UserUpdate
}

model RolePermission {
    id         String      @id @default(cuid())
    roleId     String
    permission Permissions

    role Role @relation("rolePermissions", fields: [roleId], references: [id], onDelete: Cascade)

    @@map("RolePermissions")
}

enum UserType {
    Root
    Normal
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @db.Timestamptz()
    image         String?
    type          UserType  @default(Normal)
    roleId        String?

    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    accounts Account[]
    sessions Session[]
    role     Role?     @relation("userRole", fields: [roleId], references: [id])

    @@map("Users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @db.Timestamptz()

    @@unique([identifier, token])
    @@map("VerificationTokens")
}
